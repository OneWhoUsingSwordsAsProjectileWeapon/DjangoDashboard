Цель этой работы – спроектировать и создать информационную систему для сервиса бронирования жилых помещений. Данная система будет представлять собой веб-сервис, который будет агрегировать объявления краткосрочной аренды жилья, объединяя, в себе, различные предложения от малых предприятий. Система будет агрегировать объявления о краткосрочной аренде от малых компаний. Сервис обеспечит управление бронированием, синхронизацию данных и автоматизацию общения между арендаторами и клиентами.

Цель проекта: Разработать веб-сервис агрегации объявлений о краткосрочной аренде жилья с полным функционалом на Django.
•	Управление объявлениями (CRUD + календарь доступности)
•	Бронирование с синхронизацией
•	Встроенный мессенджер (WebSocket)
•	Модерация контента
•	Рейтинги и отзывы
•	Уведомления (email/SMS)
Стек технологий:
•	Backend: Django, Django REST Framework, Django Channels
•	База данных: sqllite3
•	Фронтенд: Django Templates + HTMX/Alpine.js для динамики
•	Дополнительно: Celery (для уведомлений), Redis (кеш/WebSocket), JWT-аутентификация


django-rental-aggregator/
├── core/                           # Основные настройки проекта
│   ├── __init__.py
│   ├── asgi.py                     # ASGI-конфигурация (для WebSocket)
│   ├── settings/                   # Настройки окружения
│   │   ├── __init__.py
│   │   ├── base.py                # Общие настройки
│   │   ├── dev.py                 # Для разработки
│   │   └── prod.py                # Для продакшена
│   ├── urls.py                    # Корневые URL-маршруты
│   └── wsgi.py
│
├── listings/                       # Приложение: Объявления и бронирования
│   ├── migrations/
│   ├── __init__.py
│   ├── admin.py                   # Админ-панель для объявлений
│   ├── apps.py
│   ├── models.py                  # Модели: Listing, Booking, Review
│   ├── views.py                   # Представления: CRUD, календарь
│   ├── forms.py                   # Формы создания/редактирования
│   ├── templatetags/              # Кастомные теги шаблонов
│   │   └── listing_extras.py      # Фильтры для отображения цены и т.д.
│   ├── templates/
│   │   └── listings/
│   │       ├── listing_list.html  # Список объявлений (с фильтрами)
│   │       ├── listing_detail.html# Детали объявления + календарь
│   │       ├── booking_form.html  # Форма бронирования (HTMX)
│   │       └── partials/          # HTMX-фрагменты
│   │           ├── _calendar.html # Динамический календарь
│   │           └── _pricing.html  # Блок с ценами
│   └── static/
│       └── listings/
│           ├── css/
│           │   └── calendar.css   # Стили для календаря
│           └── js/
│               ├── calendar.js    # Логика календаря (Alpine.js)
│               └── htmx_init.js   # Инициализация HTMX
│
├── users/                         # Приложение: Пользователи
│   ├── migrations/
│   ├── __init__.py
│   ├── models.py                 # Кастомная модель User
│   ├── views.py                  # Регистрация, профиль
│   ├── forms.py                  # Формы входа/регистрации
│   ├── templates/
│   │   └── users/
│   │       ├── login.html        # Страница входа
│   │       ├── profile.html      # Профиль пользователя
│   │       └── verification.html # Подтверждение email/SMS
│   └── utils/
│       └── auth.py               # Кастомная аутентификация
│
├── chat/                          # Приложение: Мессенджер
│   ├── migrations/
│   ├── __init__.py
│   ├── consumers.py              # WebSocket-обработчики
│   ├── routing.py                # WebSocket-маршруты
│   ├── models.py                 # Модели: Message, Conversation
│   ├── templates/
│   │   └── chat/
│   │       ├── chat_room.html    # Интерфейс чата (WebSocket)
│   │       └── _message.html     # Шаблон сообщения (HTMX)
│   └── static/
│       └── chat/
│           └── js/
│               └── chat.js       # Логика WebSocket-клиента
│
├── notifications/                # Приложение: Уведомления
│   ├── __init__.py
│   ├── models.py                # Шаблоны уведомлений
│   ├── tasks.py                 # Celery-задачи для отправки
│   └── templatetags/
│       └── notify_tags.py       # Тег для показа уведомлений
│
├── subscriptions/                # Приложение: Подписки
│   ├── migrations/
│   ├── __init__.py
│   ├── models.py               # Модели: SubscriptionPlan
│   └── views.py               # Управление подписками
│
├── moderation/                   # Приложение: Модерация
│   ├── __init__.py
│   ├── models.py               # Жалобы, бан-листы
│   └── admin.py               # Действия модерации
│
├── static/                       # Глобальные статические файлы
│   ├── css/
│   │   └── global.css           # Базовые стили
│   └── js/
│       ├── htmx.js              # HTMX из CDN
│       └── alpine.js            # Alpine.js из CDN
│
├── templates/                    # Базовые шаблоны
│   ├── base.html                # Основной layout
│   ├── includes/                # Общие компоненты
│   │   ├── navbar.html         # Навигация
│   │   ├── footer.html         # Подвал
│   │   └── notifications.html  # Блок уведомлений
│   └── errors/                 # Страницы ошибок
│       ├── 404.html
│       └── 500.html
│
├── utils/                        # Вспомогательные модули
│   ├── __init__.py
│   ├── calendar_utils.py       # Логика работы с датами
│   └── price_calculator.py     # Расчет стоимости брони
│
├── requirements.txt             # Зависимости
├── manage.py
├── .env                         # Переменные окружения
├── docker-compose.yml           # Конфигурация sqllite3 
├── .replit                      # Конфигурация Replit
└── README.md

В результате анализа, системе, были выделены следующие функциональные требования: • Управление объявлениями: o Пользователь-арендодатель должен иметь возможность:  Создавать объявления о сдаче в аренду недвижимости.  Показать даты и условия, когда можно забронировать..  Обновить или удалить уже существующие объявления. • Каталог объектов: o Система должна показывать арендаторам список доступных объявлений, где они смогут отфильтровать варианты по местоположению, датам, цене и другим характеристикам жилья. o Возможность добавлять объявления в Избранное для быстрого поиска. • Проверка доступности: o Система должна проверять, доступен ли объект для аренды в выбранные даты.. o Если объект недоступен, система должна предложить другие даты или варианты. • Управление учётными записями: o Пользователи должны иметь возможность:  Зарегистрироваться в системе с помощью email, телефона или через соцсети.  Редактировать профиль: менять личные данные, настраивать уведомления, обновлять пароль.  Восстановить доступ к аккаунту можно через подтвержденный email или SMS. o Администраторы должны иметь возможность:  Смотреть и изменять профили пользователей.  Блокировать профили пользователей за нарушения. • Процесс бронирования: o Арендатор должен:  Иметь возможность выбрать жилое помещения для аренды.  Указать предпочтительные даты для бронирования.  Получать подтверждение о том, что бронь принята, а объект в указанные даты забронирован за ним. o Арендодатель должен:  Получать уведомление о новом бронировании.  Подтверждать или отклонять запросы на бронирование  Возможность обмена сообщениями между арендатором и арендодателем в рамках конкретного бронирования. • Уведомления: o Система должна отправлять уведомления:  Арендодателям — о новых заявках на бронирование.  Арендаторам — об успешном бронировании, отказе или изменении деталей брони. o Поддержка уведомлений • Отмена бронирования: o Арендатор должен иметь возможность отменить бронирование в рамках установленных условий o Арендодатель должен получать уведомление об отмене и иметь возможность выставлять новые даты объявления как доступные. • Управление профилем пользователей: o Регистрация и авторизация пользователей (арендаторов и арендодателей). o Аутентификация через email/телефон, социальные сети. o Просмотр и обновление профиля пользователя, включая историю бронирований. Нефункциональные требования: Нефункциональные требования определяют, каким образом система будет выполнять свои функции. Они охватывают такие вещи, как скорость, надежность, безопасность и удобство для пользователей: Производительность: • Обработка 95% запросов на проверку доступности в течение менее 1 секунды. o Система должна поддерживать максимум до 10,000 пользователей одновременно без снижения производительности. o Время отклика системы для создания бронирований — не более 3 секунд. • Масштабируемость: o Система должна справляться с ростом числа пользователей и объема данных, например, до 100000 пользователей. o Каталог объектов должен быть хорошо индексирован. • Доступность: o Система должна работать не меньше 99.9% времени в месяц, включая время, отведенное на техническое обслуживание. • Надежность: o Система должна исключать возможность двойного бронирования одного объекта на одну и ту же дату для разных пользователей.. o Восстановление данных бронирований после сбоя системы, если делали резервные копии хотя бы раз в день. • Безопасность: o Все данные о пользователях должны быть защищены с помощью SSL. o Для арендодателей и арендаторов нужно ввести двухфакторную аутентификацию. o Пароли пользователей нужно хранить с помощью современных методов шифрования.. o Доступ к административным функциям только для пользователей с соответствующими правами. • Юзабилити: o Интерфейс системы должен быть интуитивно понятным, с навигацией, адаптированной как для desktop, так и для мобильных устройств. o Минимальное количество кликов для завершения процесса бронирования. o Поддержка нескольких языков интерфейса (например, английский, русский, другие по требованию). • Обслуживание и поддержка: o Возможность отслеживания событий в системе через логи (действия пользователей, сбои, платежи). o Предоставление технической поддержки пользователям, e-mail или телефон. • Согласованность данных: o Все изменения данных бронирования (создание, обновление, удаление) должны быть синхронизированы на всех существующих уровнях системы
